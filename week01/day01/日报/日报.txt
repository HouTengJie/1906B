2020-06-01：
一、ElasticSearch介绍
   1、什么是elasticsearch?
ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个基于RESTful web接口的分布式全文搜索引擎。ElasticSearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。ElasticSearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。根据DB-Engines的排名显示，ElasticSearch是最受欢迎的企业搜索引擎，其次是Apache Solr（也是基Lucene）。
总结：
​ 1、elasticsearch是一个基于Lucene的分布式全文检索服务器。
​ 2、elasticsearch隐藏了Lucene的复杂性，对外提供Restful 接口来操作索引、搜索。
es和solr选择哪个？
1.如果你公司现在用的solr可以满足需求就不要换了。
2.如果你公司准备进行全文检索项目的开发，建议优先考虑elasticsearch，因为像Github这样大规模的搜索都在用它。


2、elasticsearch原理
索引结构
​ 下图是ElasticSearch的索引结构，右边黑蓝色色部分是原始文档，左边黄色部分是逻辑结构，逻辑结构也是为了更好的去描述ElasticSearch的工作原理及去使用物理结构中的索引文件。

倒排索引
倒排索引（Inverted index）:也常被称为反向索引，倒排索引是从关键字到文档的映射（已知关键字求文档）。
逻辑结构部分是一个倒排索引表，由三部分组成：
1、将搜索的文档最终以<font color=red>Document</font>方式存储起来。
2、将要搜索的文档内容分词，所有不重复的词组成<font color=red>分词</font>列表。
3、每个分词和docment都有<font color=red>关联</font>。



现在，如果我们想搜索 包含quick brown词条的文档：

两个文档都匹配，但是第一个文档比第二个匹配度更高。如果我们使用仅计算匹配词条数量的简单 相似性算法 ，那么，我们可以说，对于我们查询的相关性来讲，第一个文档比第二个文档更佳。

二、ES安装
环境需求
1、jdk必须是jdk1.8.0_131以上版本。
2、ElasticSearch 需要至少4096 的线程池才能正常启动，ES 至少需要 65536 的文件创建权限，所以需要为虚拟机分配至少1.5G以上的内存
3、从5.0开始，ElasticSearch 安全级别提高了，不允许采用root帐号启动
4、Elasticsearch的插件要求至少3.5以上版本
	a、安装
		1、设置虚拟机内存>1.5G
		2、创建用户
		3、安装
			解压即安装
			配置elasticsearch.yml
		4、解决内核问题
		5、解决文件创建权限问题
		6、决绝线程开启限制问题
		7、解决虚拟机内存问题

	b、启动和关闭
		启动：
			./bin/elasticsearch
			./elasticsearch -d

		关闭：			kill -9 pid



2020-06-02：
三、ES快速入门
 1、index管理
1.创建index
索引：包含若干相似结构的 Document 数据，相当于数据库的database。
语法：

PUT /java1906
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 0
  }
}
number_of_shards - 是表示一个索引库将拆分成多片分别存储不同的结点，提高了ES的处理能力和高可用性
number_of_replicas- 是为每个 primary shard分配的replica shard数，如果只有一台机器，设置为0

2.修改index
注意：索引一旦创建，primary shard 数量不可变化，可以改变replica shard 数量。

PUT /java1906/_settings
{
  "number_of_replicas" : 1
}
ES 中对 shard 的分布是有要求的，有其内置的特殊算法：
​ Replica shard 会保证不和他的那个 primary shard 分配在同一个节点上；如过只有一个节点，则此案例执行后索引的状态一定是yellow。
3.删除index
DELETE /java1906 [, other_index]
2.mapping管理
映射，创建映射就是向索引库中创建field（类型、是否索引、是否存储等特性）的过程，下边是document和field与关系数据库的概念的类比：
​ 索引库（index）--------------------------------Database数据库
​ 类型（type）-----------------------------Table数据表
​ 文档（Document）----------------Row 行
​ 字段（Field）-------------------Columns 列
注意：6.0之前的版本有type（类型）概念，type相当于关系数据库的表，ES6.x 版本之后，type概念被弱化ES官方将在ES7.0版本中彻底删除type。

1.创建mapping
语法：POST index_name/type_name/_mapping
如：

POST /java1906/course/_mapping
{
  "properties": {
     "name": {
        "type": "text"
     },
     "description": {
        "type": "text"
     },
     "studymodel": {
        "type": "keyword"
     }
  }
}
2.查询mapping
查询所有索引的映射：

GET /java1906/course/_mapping

3、doucument管理
a、创建doucment
		POST /java1907/couse/1
		{
			"name":"php从入门到放弃"
		}
		POST /java1907/couse
		{
			"name":"php从入门到放弃"
		}
		PUT /java1907/couse/1
		{
			"name":"php从入门到放弃"
		}
b、查询doucument
		如：根据课程id查询文档
GET /java1906/course/1
如：查询所有记录
GET /java1906/course/_search
如：查询名称中包括php 关键字的的记录
GET /java1906/course/_search?q=name:门

	c、删除document
		DELETE /java1906/couse/1

四、IK分词器
  1、安装
	解压到plugs目录下，并重命名为ik

    2、自定义词库
	IkAnalyzer.cfg.xml：配置扩展词典和停用词典
	main.dic：扩展词典
	stopwords.dic：停用词典

3、两种分词模式
ik分词器有两种分词模式：ik_max_word和ik_smart模式。
1、ik_max_word
​ 会将文本做最细粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为“中华人		民共和国、中华人民、中华、华人、人民共和国、人民、共和国、大会堂、大会、		会堂等词语。
2、ik_smart
​ 会做最粗粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为中华人民共和		国、人民大会堂。
五、field详细介绍
1.field的属性介绍
1.type：
通过type属性指定field的类型。

"name":{
       "type":"text"
}
2.analyzer：
通过analyzer属性指定分词模式。
 "name": {
               "type": "text",
               "analyzer":"ik_max_word"
   }
上边指定了analyzer是指在索引和搜索都使用ik_max_word，如果单独想定义搜索时使用的分词器则可以通过search_analyzer属性。对于ik分词器建议是索引时使用ik_max_word将搜索内容进行细粒度分词，搜索时使用ik_smart提高搜索精确性。

"name": {
                  "type": "text",
                  "analyzer":"ik_max_word",
                  "search_analyzer":"ik_smart"
 }
3.index：
通过index属性指定是否索引。默认为index=true，即要进行索引，只有进行索引才可以从索引库搜索到。但是也有一些内容不需要索引，比如：商品图片地址只被用来展示图片，不进行搜索图片，此时可以将index设置为false。 删除索引，重新创建映射，将pic的index设置为false，尝试根据pic去搜索，结果搜索不到数据
"pic": {
       "type":"text",          
       "index":false
}
2.field索引不存储
​ 如果某个字段内容非常多，业务里面只需要能对该字段进行搜索，比如：商品描述。查看文档内容会再次到mysql或者hbase中取数据，把大字段的内容存在Elasticsearch中只会增大索引，这一点文档数量越大结果越明显，如果一条文档节省几KB，放大到亿万级的量结果也是非常可观的。
如果只想存储某几个字段的原始值到Elasticsearch，可以通过incudes参数来设置，在mapping中的设置如下:
POST /java1906/course/_mapping
{
  "_source": {
    "includes":["description"]
  }
}
同样，可以通过excludes参数排除某些字段：
POST /java1906/course/_mapping
{
  "_source": {
    "excludes":["description"]
  }
}
4.常用field类型
1.text文本字段
例如：1、创建新映射：

POST /java1906/course/_mapping
{
  "properties": {  
       "name": {
           "type": "text",
           "analyzer":"ik_max_word",
           "search_analyzer":"ik_smart"
       },        
      "description": {
          "type": "text",
          "analyzer":"ik_max_word",
          "search_analyzer":"ik_smart"
      },
      "pic":{
          "type":"text",
          "index":false
      },
      "studymodel":{
          "type":"text"
      }
  }  
}
2、插入文档：

POST /java1906/course/1
{
  "name":"python从入门到放弃",
  "description":"人生苦短，我用Python",
  "pic":"250.jpg",
  "studymodel":"201002"
}
3.查询测试：

GET /java1906/course/_search?q=name:放弃
GET /java1906/course/_search?q= description:人生
GET /java1906/course /_search?q=pic:250.jpg
结果：name和description都支持全文检索，pic不可作为查询条件
4.keyword关键字字段
上边介绍的text文本字段在映射时要设置分词器，keyword字段为关键字字段，通常搜索keyword是按照整体搜索，所以创建keyword字段的索引时是不进行分词的，比如：邮政编码、手机号码、身份证等。keyword字段通常用于过虑、排序、聚合等。
1、更改映射：

POST /java1906/course/_mapping
{
    "properties": {
       "studymodel":{
          "type":"keyword"
       },
       "description": {
          "type": "text",
          "analyzer":"ik_max_word",
          "search_analyzer":"ik_smart"
       },
       "pic":{
         "type":"text",
         "index":false
       },
       "name":{
          "type":"keyword"
       }
    }
}
2、插入文档：
PUT /java1906/course/2
{
 "name": "java编程基础",
 "description": "java语言是世界第一编程语言",
 "pic":"250.jpg",
 "studymodel": "201001"
}
3、根据name查询文档：
GET /java1906/course/_search?q=name:java编程基础
name是keyword类型，所以查询方式是精确查询。
5.date日期类型
日期类型不用设置分词器，通常日期类型的字段用于排序。1)format通过format设置日期格式，多个格式使用双竖线||分隔, 每个格式都会被依次尝试, 直到找到匹配的
1、设置允许date字段存储年月日时分秒、年月日及毫秒三种格式。
POST /java1906/course/_mapping
{
    "properties": {
       "timestamp": {
         "type":   "date",
         "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd"
       }
     }
}
2、插入文档：
PUT /java1906/course/3
{
"name": "spring开发基础",
"description": "spring 在java领域非常流行，java程序员都在用。",
"studymodel": "201001",
 "pic":"250.jpg",
 "timestamp":"2018-07-04 18:28:58"
}
6.Numeric类型
下图是ES支持的数值类型：尽可能选择范围小的数据类型,字段的长度越短, 索引和搜索的效率越高;

1、更新已有映射：
POST /java1906/course/_mapping
{
    "properties": {
    "price": {
        "type": "double"
     }
  }
}
2、插入文档
PUT /java1906/course/3
{
 "name": "spring开发基础",
 "description": "spring 在java领域非常流行，java程序员都在用。",
 "studymodel": "201001",
 "pic":"250.jpg",
 "timestamp":"2018-07-04 18:28:58",
 "price":38.6
}


2020-06-03：
六、Spring Boot整合ElasticSearch
1.搭建工程
1.pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
    </parent>

    <groupId>com.usian</groupId>
    <artifactId>springboot_elasticsearch</artifactId>
    <version>1.0-SNAPSHOT</version>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-high-level-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
    </dependencies>
</project>
2.application.yml
spring:
  data:
    elasticsearch:
      cluster-nodes: 192.168.233.134:9200
3.Config
package com.usian.config;

import org.apache.http.HttpHost;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestHighLevelClient;
import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ElasticsearchConfig extends ElasticsearchProperties{

	@Bean
	public RestHighLevelClient getRestHighLevelClient() {
        String[] hosts = getClusterNodes().split(",");
        HttpHost[] httpHosts = new HttpHost[hosts.length];
        for (int i = 0; i < httpHosts.length; i++) {
            String h = hosts[i];
            httpHosts[i] = new HttpHost(h.split(":")[0],Integer.parseInt(h.split(":")[1]));
        }
		return new RestHighLevelClient(RestClient.builder(httpHosts));
	}
4.app
package com.usian;
​
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
​
@SpringBootApplication
public class ElasticsearchApp {
​
    public static void main(String[] args) {
        SpringApplication.run(ElasticsearchApp.class, args);
    }
}
2.索引管理
1.创建索引库
	CreateIndexRequest createIndexRequest = new CreateIndexRequest("java1906");
	createIndexRequest.settings("");
	createIndexRequest.mapping("");
	restHighLevelClient.indices().create(createIndexRequest,RequestOptions.DEFAULT)


2.删除索引库
	DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("java1906");
	restHighLevelClient.indices().delete(deleteIndexRequest,RequestOptions.DEFAULT);

3.添加文档
	IndexRequest indexRequest = new IndexRequest("java1906", "course", "1");
	indexRequest.source();
	restHighLevelClient.index(indexRequest,RequestOptions.DEFAULT);

4.批量添加文档
	BulkRequest bulkRequest = new BulkRequest();
	bulkRequest.add(new IndexRequest("java1906", "course", "1").source(""));
	bulkRequest.add(new IndexRequest("java1906", "course", "1").source(""));
	restHighLevelClient.bulk(bulkRequest,RequestOptions.DEFAULT);

5.修改文档
	UpdateRequest updateRequest = new UpdateRequest("java1906", "course", "1");
	indexRequest.doc("");
	restHighLevelClient.update(indexRequest,RequestOptions.DEFAULT);

6.删除文档
	DeleteRequest deleteRequest = new DeleteRequest("java1906", "course", "1");
	restHighLevelClient.delete(deleteRequest,RequestOptions.DEFAULT);

7.简单搜索
	GetRequest getRequest = new GetRequest("java1906", "course", "1");
	restHighLevelClient.get(getRequest,RequestOptions.DEFAULT);

8.dsl搜索
	1、match_all
		SearchRequest searchRequest = new SearchRequest("java1906");
		searchRequest.types("course");

		SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
		searchSourceBuilder.query(QueryBuilders.matchAllQuery());

		searchRequest.search(searchSourceBuilder)
		restHighLevelClient.search(searchRequest,RequestOptions.DEFAULT);

	2、分页查询
		SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
		searchSourceBuilder.query(QueryBuilders.matchAllQuery());
		searchSourceBuilder.form(1);
		searchSourceBuilder.size(2);
		searchSourceBuilder.sort("price",SortOrder.DESC);
2020-06-05
   商品搜索：
           搜索展示的商品信息：
               对应的业务域：
              	   1、商品Id  2、商品标题  3、商品卖点  4、商品价格  5、商品图片  6、分类名称  7、商品描述
               需要从tb_item, tb_item_cat, tb_item_desc表中查询商品数据：
               根据前端传过来的搜索条件，到后台进行查询，名字，描述，卖点，类别，这些域，同时进行数据分页和搜索条件的
           高亮处理，最后返回一个结果集，完成查询

   索引库同步：
	   索引库同步，这个索引库同步是使用MQ实现的,MQ的主要作用有，应用解耦，流量削锋，异步处理。在商品添加的
              时候，将添加的数据ID发送到MQ中，然后在ElasticSearch模块的服务消费者，配置MQ的队列监听，收到消息后，
              通过ID去数据库中查询信息，并添加到ElasticSearch中，实现索引库同步